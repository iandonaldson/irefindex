#!/bin/sh

if [ -e "irdata-config" ]; then
    . "$PWD/irdata-config"
elif [ -e "scripts/irdata-config" ]; then
    . 'scripts/irdata-config'
else
    . 'irdata-config'
fi

if [ "$1" = '--help' ]; then
    cat 1>&2 <<EOF
Usage: $PROGNAME [ --check ] [ --no-parse ] <source>

Parse data from the specified source. The following sources are supported:

$ALLSOURCES

If the source is specified as - it is read from standard input.
EOF
    exit 1
fi

if [ "$1" = '--check' ]; then
    CHECK=$1
    shift 1
fi

if [ "$1" = '--no-parse' ]; then
    NO_PARSE=$1
    shift 1
fi

SOURCE=$1

if [ "$SOURCE" = '-' ]; then
    echo "$PROGNAME: Reading source name from standard input..." 1>&2
    read -r SOURCE
    echo "$PROGNAME: Using $SOURCE..." 1>&2
fi

eval SOURCEDIR='$'"$SOURCE"_DIR_NAME
eval XMLFILEPATTERN='$'"$SOURCE"_XML_FILE_PATTERN
eval OTHERFILEPATTERN='$'"$SOURCE"_OTHER_FILE_PATTERN
FILEPATTERN=${XMLFILEPATTERN:-$OTHERFILEPATTERN}
eval PARSER='$'"$SOURCE"_PARSER

# Check for improper source names which don't map to directories.

if [ ! "$SOURCEDIR" ]; then
    echo "$PROGNAME: $SOURCE is not a valid source name." 1>&2
    exit 1
fi

# Check for absent file-matching patterns.

if [ ! "$FILEPATTERN" ]; then
    echo "$PROGNAME: $SOURCE does not provide any files." 1>&2
    exit 1
fi

DATADIR="$DATA/$SOURCEDIR"

# Check for the source's data directory.

if [ ! -e "$DATADIR" ]; then
    echo "$PROGNAME: Source $SOURCE provides no data directory." 1>&2
    exit 1
fi

OUTPUTDIR="$DATA/import/$SOURCEDIR"

if [ ! -e "$OUTPUTDIR" ]; then
    mkdir -p "$OUTPUTDIR"
fi

FILES="$DATADIR/$FILEPATTERN"

for FILE in $FILES; do

    # Where the pattern did not expand, expect the pattern as a file.

    if [ "$FILE" = "$FILES" ] && [ ! -e "$FILE" ]; then
        echo "$PROGNAME: Source $SOURCE does not appear to provide files." 1>&2
        exit 1
    fi

    # Test for any XML file and run xmllint.

    if [ ! -e "$FILE" ] || [ "$CHECK" ] && [ "$XMLFILEPATTERN" ] && ! xmllint "$FILE" > /dev/null 2>&1 ; then
        echo "$PROGNAME: File $XMLFILE in source $SOURCE failed." 1>&2
        STATUS=1
    fi
done

if [ ! "$NO_PARSE" ]; then
    if [ "$XMLFILEPATTERN" ]; then
        if "$TOOLS/irdata_xml2tab.py" "$OUTPUTDIR" "$SOURCE" $FILES ; then
            echo $SOURCE
        fi
    else
        if "$TOOLS/$PARSER" "$OUTPUTDIR" $FILES ; then
            echo $SOURCE
        fi
    fi
else
    echo $SOURCE
fi
