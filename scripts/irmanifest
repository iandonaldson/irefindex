#!/bin/sh

if [ -e "irdata-config" ]; then
    . "$PWD/irdata-config"
elif [ -e "scripts/irdata-config" ]; then
    . 'scripts/irdata-config'
else
    . 'irdata-config'
fi

MANIFEST_OUTPUT="$DATA/irefindex_manifest"

if [ "$1" = '--help' ]; then
    cat 1>&2 <<EOF
Usage: $PROGNAME ( <source>... | --all )

Create a manifest of source data releases. If --all is specified, the following
sources will be inspected:

$ALLSOURCES

Specifying --all will create a new manifest file. Specifying individual sources
will append manifest entries to any existing file in the following location:

$MANIFEST_OUTPUT
EOF
    exit 1
fi

if [ ! "$1" ]; then
    echo "$PROGNAME: Please specify source names or --all." 1>&2
    exit 1
elif [ "$1" = '--all' ]; then
    SOURCES="$ALLSOURCES"

    # Remove any existing output if it exists.

    if [ -e "$MANIFEST_OUTPUT" ]; then
        rm "$MANIFEST_OUTPUT"
    fi
else
    SOURCES=$*
fi

# Loop over the sources and collect manifest information in a file.

  for SOURCE in $SOURCES ; do
      eval URL='$'"$SOURCE"_MANIFEST_URL
      eval PARSER='$'"$SOURCE"_MANIFEST_PARSER
      eval FILE='$'"$SOURCE"_MANIFEST_FILE
      eval DOWNLOAD_FILES='$'"$SOURCE"_DOWNLOAD_FILES
      eval SOURCEDIR='$'"$SOURCE"_DIR_NAME

      DATADIR="$DATA/$SOURCEDIR"

      # If a source provides a URL, extract manifest information from the resource.

      if [ "$URL" ]; then
          source=$(echo $SOURCE | tr '[:upper:]' '[:lower:]')
          DETAILS="$MANIFESTS/irdata_manifest_$source.txt"

            "$TOOLS/irdata_manifest.py" "$URL" < "$DETAILS" \
          | sed -e "s/\(.*\)/$SOURCE\t\\1/"

      # If a source uses a manifest parser, use that to obtain information.

      elif [ "$PARSER" ]; then

            "$PARSER" "$DATADIR/$FILE" \
          | sed -e "s/\(.*\)/$SOURCE\t\\1/"

      # Otherwise, extract basic timestamp information from the downloads.

      elif [ "$DOWNLOAD_FILES" ]; then

          # Expand the download files.

          DOWNLOAD_PATHS=

          for DOWNLOAD in $DOWNLOAD_FILES ; do
              DOWNLOAD_PATHS="${DOWNLOAD_PATHS}${DOWNLOAD_PATHS:+ }"$DATADIR/$DOWNLOAD
          done

          # Get the earliest timestamp.

            "$SCRIPTS/irfiletime" $DOWNLOAD_PATHS \
          | sort \
          | head -n 1 \
          | sed -e "s/\(.*\)/$SOURCE\tDATE\t\\1/"

      fi

  done \
>> "$MANIFEST_OUTPUT"

# Make the date formats available for import.

cp "$MANIFESTS/dateformats.txt" "$DATA"

# Report any failed manifests.

FAILED=
for SOURCE in $SOURCES ; do
    if ! grep -e "^$SOURCE"$'\t' "$MANIFEST_OUTPUT" > /dev/null 2>&1 ; then
        FAILED="${FAILED}${FAILED:+ }$SOURCE"
    fi
done

if [ "$FAILED" ]; then
    echo "$PROGNAME: Manifest generation failed for sources: $FAILED"
    exit 1
fi
