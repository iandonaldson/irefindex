## This file uses a syntax notation compatible with MoinMoin and the
## ImprovedTableParser extension. It can be deployed in a MoinMoin Wiki or read
## in a text editor.

= Database Schema Details for iRefIndex =

The following principal table types are provided in the database schema:

{{{#!table
'''Prefix''' || '''Role'''
==
mitab        || MITAB-originating source data
==
xml          || PSI-XML-originating source data together with converted MITAB
             .. and BIND data
==
xml_xref     || Data specifically providing cross-references such as identifiers
==
xml_names    || Data specifically providing name information such as short
             .. labels and full names
==
irefindex    || Information derived from the common XML schema and sequence
             .. databases for the build process
}}}

In addition, the following source-related table types are used:

{{{#!table
'''Prefix''' || '''Source details'''               || '''Destination'''
==
bind         || BIND (flat text format)            || xml, xml_xref, xml_names
==
dig          || Disease Groups (DIG)               || ''iRefScape data''
==
fly          || !FlyBase                           || irefindex_sequences
==
gene         || Entrez Gene                        || ''gene mappings, iRefScape data''
==
genpept      || !GenPept                           || irefindex_sequences
==
ipi          || IPI                                || irefindex_sequences
==
mmdb         || MMDB                               || irefindex_sequences
==
pdb          || PDB                                || irefindex_sequences
==
psicv        || PSI-MI controlled vocabulary terms || ''MITAB, iRefScape data; BIND conversion''
==
refseq       || !RefSeq                            || irefindex_sequences
==
taxonomy     || Entrez Taxonomy                    || ''MITAB data; !GenPept conversion''
==
uniprot      || !UniProt                           || irefindex_sequences
==
yeast        || Yeast                              || irefindex_sequences
}}}

The above data sources are typically delivered in non-XML and generally
unstandardised formats, meaning that their data must be processed before being
merged with other data. Only BIND tables contribute to the sum of interaction
data in the system.

== Concepts and Entities ==

Interaction data is centred upon the following general concepts: interactions,
interactors, participants and experiments. However, one may refer to an
interaction as a general statement (proteins A and B are known to interact)
without any contextual information, or as a specific observation (proteins A
and B interact are observed to interact) where certain conditions exist. Thus,
it becomes necessary to distinguish between two notions when referring to
concepts:

{{{#!table
'''Concept''' || '''Observations'''
              || '''Knowledge'''
==
Interaction   || Specific or observed interactions (or interaction instances)
              || General interactions (or interaction knowledge)
==
Interactor    || Specific or observed interactors (or specific experiment
              .. details of an interactor)
              || General interactors (or knowledge about the properties of a
              .. protein)
}}}

Particularly with interactions, it can be informative to consider a combination
of an interaction with an experiment when considering interaction data sources
and the interaction records that they provide.

Due to the flexibility of the data representation and presumably the nature of
collected information, some sources connect the fundamental concepts of
interaction data in different ways:

{{{#!table
.. Experiments grouped by interaction (many experiments per interaction)
|| !BioGrid, !IntAct, MINT, MPACT
==
.. Interactions grouped by experiment (many interactions per experiment)
|| BIND Translation, CORUM, DIP, HPRD, MPI-IMEX, MPI-LIT, OPHID
}}}

All such source data refers to specific observations, not general knowledge,
and the database entities described below identify and refer to such specific
observations.

== Entity Definitions ==

From iRefIndex 10 onwards, instead of employing arbitrary, surrogate keys to
identify and refer to the different entities, the schema employs compound keys
that are meant to genuinely identify entities within the source data. Each
such compound key makes use of the following fundamental data types to
indicate where an entity has been defined:

{{{#!table
'''Data Type'''  || '''Definition'''
==
source           || The source database, given as a canonical name
==
filename         || The name of the data file provided by a source database
==
entry            || The entry section within a particular data file where the
                 .. entity occurs (this being explicitly provided as an element
                 .. in PSI-XML-based data files)
==
interactionid    || A label for a specific interaction
==
interactorid     || A label for a specific interactor
==
participantid    || A label for a specific participant
==
experimentid     || A label for a specific experiment
}}}

Inspection of interaction data has indicated that the following hierarchy can
be used to unambiguously refer to a particular entity in the source data:

  1. source
  2. filename
  3. entry
  4. entity type or scope (interaction, interactor, participant, experiment)
  5. parent identifier or `parentid` (the identifier qualified by the scope)

Thus, within the context of a particular entity type - for example, an
interactor - the hierarchy is simplified slightly as follows:

  1. source
  2. filename
  3. entry
  4. interactorid

By specifying all four identifiers in an entity-specific reference, it should
be possible to unambiguously refer to a specific entity in the combined
interaction data. Consequently, the following compound keys define each kind
of entity:

{{{#!table
'''Entity''' || '''Key Definition'''
==
interaction  || source, filename, entry, interactionid
==
interactor   || source, filename, entry, interactorid
==
participant  || source, filename, entry, participantid
==
experiment   || source, filename, entry, experimentid
}}}

=== Entity-Specific Identifier Locality ===

Although it is technically possible to ensure that a single identifier (in the
role of parent identifier) can used to uniquely label entities of a particular
type in a particular source file, this is not typically done by the source
databases for all entity types. Thus, it can be said that some identifiers
have a particular "locality", meaning that they can only be assumed to be
unique within a particular region of a file or within a certain scope.

For example, interactors in an interaction may be given the identifiers 1, 2
and 3, but the assignment of these identifiers to entities may only be valid
within that interaction. Within another interaction, the identifiers 1, 2 and
3 may refer to other entities. Fortunately, such chaotic numbering usually
occurs only when the identifiers have no actual use and where the entities'
involvement is ''implicit'', derived from the location of the elements
describing them in the data file. Where the involvement of entities in
relationships is ''explicit'', their identifiers typically have `entry`-level
locality and can be regarded as meaningful.

Data sources employing references to other elements, such as `experimentRef`
referring to `experimentDescription`, generally provide explicit entities
whose identifiers can be relied upon. The following table summarises those
sources providing explicit references:

{{{#!table
'''Source'''   || '''Explicit'''
==
!BioGRID       || experiment, interactor
==
HPRD           || experiment, interactor
==
!IntAct        || experiment, interactor
==
MINT           || experiment, interactor
==
OPHID          || experiment
}}}

Thus, the following policies are used:

{{{#!table
'''Entity''' || '''Policy'''
==
Experiment   || Retain explicit identifiers;
             .. assign unique identifiers for implicit experiments
==
Interaction  || Retain identifiers
==
Interactor   || Retain explicit interactor identifiers;
             .. assign unique identifiers for implicit interactors
==
Participant  || Assign unique identifiers
}}}

The consequence of such policies is that identifying an interactor within the
source data can be more involved using the identifier hierarchy described
above if meaningful identifiers are not present in the source data for
interactors. However, in conjunction with interaction information, the task of
identification should be simplified somewhat because interaction identifiers
should always be unique within any given `entry` element.

== Relationships Between Interactions, Interactors and Experiments ==

The XML tables provide mappings between the three main entity types.

{{{#!table
'''Table'''     || '''Mapping'''
==
xml_interactors || Interactions to participants (being specific observations of
                .. interactors)
==
xml_experiments || Interactions to experiments (being specific observations of
                .. interactions)
}}}

== iRefIndex Table Reference ==

The [[Workflow|workflow]] documentation describes the population of tables,
and the following reference indicates where specific kinds of information can
be found.

{{{#!table
'''Entity type''' || '''Table'''                     || '''Properties'''
==
<rowspan="3">
Interactors       || irefindex_rogids                || Only "active" interactors described by
                                                     .. interaction data; source details provided
                                                     .. (specific and general interactors)
==
                  .. irefindex_rogid_identifiers     || Identifiers for "active" interactors
                                                     .. (general interactors)
==
                  .. irefindex_all_rogid_identifiers || Identifiers for all possible interactors
                                                     .. described by sequence data
                                                     .. (general interactors)
==
<rowspan="4">
Interactions      || irefindex_interactions_complete || Source details for "active", complete
                                                     .. interactions where all interactors have been
                                                     .. identified
                                                     .. (specific interactions only)
==
                  .. irefindex_rigids                || Only "active" interactions described by
                                                     .. interaction data; source details provided
                                                     .. (specific and general interactions)
==
                  .. irefindex_interactions          || "Active" interactions with interactor and
                                                     .. source details, preserving all interactor
                                                     .. details (including multiple identical
                                                     .. interactors in a specific interaction)
                                                     .. (specific and general interactions)
==
                  .. irefindex_distinct_interactions || A simple correspondence between "active"
                                                     .. interactions and their interactors without
                                                     .. source details, preserving all interactor
                                                     .. details (including multiple identical
                                                     .. interactors)
                                                     .. (general interactions)
}}}
